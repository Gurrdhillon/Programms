package com.mycompany.a3;

import java.util.Observable;
import java.util.Observer;

import com.codename1.charts.models.Point;
import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.Container;
import com.codename1.ui.Graphics;
import com.codename1.ui.plaf.Border;
import com.mycompany.a3.GameWorld.GameObjectIterator;

public class MapView extends Container implements Observer {
	
	// Reference to the GameWorld is saved here
	private GameWorld gw = null;
	
//	private Graphics g;
	
	
	MapView(GameWorld gw){
		this.gw = gw;
//		this.getAllStyles().setBorder(Border.createLineBorder(4,
//		ColorUtil.MAGENTA));
		this.getAllStyles().setBorder(Border.createLineBorder(4,
				ColorUtil.rgb(255,0,0)));
	}
	
	@Override
	public void paint(Graphics g){
		super.paint(g);
//		g.setColor(ColorUtil.BLACK);
//		System.out.println("X: " +  getX() +  "Y: " +  getY());
//		System.out.println("paint is invoked");
		
		
//		g.fillRect(getX() + 100, getY() + 100,100,100);
		
		IIterator gameObjects = gw.getIterator();
		int i = 1;
//		int x = 100;
//		int y = 100;
		while(gameObjects.hasNext()) {
			gameObjects.getNext().draw(g, new Point(getX(), getY()));
//			System.out.println(gameObjects.getNext());
//			System.out.println(i);
//			i++;
		}
	}

	@Override
	public void update(Observable observable, Object data) {
		// TODO Auto-generated method stub
		System.out.println("\n Map View\n");
		gw.map();
		repaint();
		
		//Should call the repaint()
	}
	
	@Override
	public void pointerPressed(int x, int y) {
		System.out.println("In the Pointer Pressed");
		x = x - this.getParent().getAbsoluteX();
		y = y - this.getParent().getAbsoluteY();
		
		Point pPtrRelPrnt = new Point(x,y);
		Point pCmpRelPrnt = new Point(this.getX(), this.getY());
		
		IIterator gameObjects = gw.getIterator();
		
		while(gameObjects.hasNext()) {
			
			GameObject next = gameObjects.getNext();
			if(next instanceof ISelectable) {
				
				if ( ((ISelectable) next).contains(pPtrRelPrnt,pCmpRelPrnt)) {
					((ISelectable) next).setSelected(true);
				} else {
					((ISelectable) next).setSelected(false);
				}	
			}
	
		}
		repaint();
	}
}
